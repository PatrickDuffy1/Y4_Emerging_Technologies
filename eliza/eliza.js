class Eliza 
{
    constructor() 
    {
        // Psychobabble taken from the python code from the lecture and converted to javascript.
        // Extra sychobabble generated by ChatGPT
        // https://chatgpt.com/share/67517e83-0d7c-800d-bbb1-424268efd977
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
        this.responses = {
            'hello|hi|hey': [
                "Hello! How are you feeling today?",
                "Hi there! What’s on your mind?",
                "Hey! How can I help you?"
            ],
            'you remind me of (.*)': [
                "Why do you think I remind you of $1?",
                "What makes you think of $1 when talking to me?",
                "Is it a good feeling to be reminded of $1?"
            ],
            '(.*) mother|father|family|parent(.*)': [
                "Tell me more about your family.",
                "How does that make you feel about your family?",
                "What role does your family play in your thoughts?",
                "Do you feel connected to your family?",
                "What did you learn from your family growing up?"
            ],
            'I need (.*)': [
                "Why do you need $1?",
                "Would getting $1 really help you?",
                "What if you didn’t need $1?",
                "Is $1 something you feel you can't live without?",
                "What happens if you don’t get $1?"
            ],
            'I feel (.*)': [
                "Why do you feel $1?",
                "Does feeling $1 happen often?",
                "How does that feeling affect you?",
                "What triggered this feeling in you?",
                "What would make you feel differently?"
            ],
            'I am (.*)': [
                "Why do you think you are $1?",
                "How long have you felt that way?",
                "What made you feel like $1?",
                "Do you feel that way often?",
                "How would you like to feel instead?"
            ],
            '(.*) sorry|apologize(.*)': [
                "No need to apologize.",
                "Apologies aren't necessary. Why do you feel that way?",
                "It’s okay to feel that way.",
                "What makes you feel like you need to apologize?",
                "Is there something you want to make right?"
            ],
            'bye|goodbye|exit': [
                "Goodbye! Take care.",
                "Thank you for sharing. Goodbye!",
                "Bye! I’m here if you need to talk again.",
                "Take care, and don't hesitate to reach out if you need support.",
                "Goodbye! Wishing you all the best."
            ],
            '(.*) (love|hate)(.*)': [
                "What makes you feel $1?",
                "Why do you feel $1 about that?",
                "How does $1 make you feel?",
                "Tell me more about why you feel $1.",
                "What would change if you felt differently about $1?"
            ],
            '(.*) work|job|career(.*)': [
                "How do you feel about your job?",
                "What part of your work brings you the most satisfaction?",
                "What would you like to change about your career?",
                "How does your work affect your mood?",
                "Is there something you’d like to achieve in your career?"
            ],
            '(.*) friend|friends(.*)': [
                "Tell me more about your friendships.",
                "What do you value most in a friend?",
                "How do your friends support you?",
                "Do you feel close to your friends?",
                "What qualities do you appreciate in your friends?"
            ],
            '(happy|sad|angry)(.*)': [
                "What do you think makes you feel $1?",
                "Can you think of a time when you felt $1?",
                "Does feeling $1 happen often for you?",
                "What does $1 look like for you?",
                "What would help you feel less $1?"
            ],
            '(.*) (problem|issue|difficulty)(.*)': [
                "What seems to be the issue?",
                "Can you explain more about the problem you're facing?",
                "What makes this a challenge for you?",
                "How do you usually deal with difficulties like this?",
                "What would help solve this problem for you?"
            ],
            '(.*) (scared|fear)(.*)': [
                "What do you think you're afraid of?",
                "Can you think of why you might be feeling scared?",
                "What helps you cope with fear?",
                "How do you usually face your fears?",
                "What would make you feel less fearful?"
            ],
            '(.*) (stress|stressed)(.*)': [
                "What’s been stressing you out lately?",
                "What makes you feel stressed?",
                "How do you typically manage stress?",
                "What do you think helps reduce your stress?",
                "Would you like to talk more about your stress?"
            ],
            '(.*) (relationship|partner)(.*)': [
                "Tell me more about your relationship.",
                "What do you value most in a partner?",
                "How do you feel in your current relationship?",
                "What do you wish could change in your relationship?",
                "What brings you joy in your relationship?"
            ],
            '(.*) (future|plan|goal)(.*)': [
                "What are your hopes for the future?",
                "What are you planning to achieve next?",
                "How do you see yourself in the future?",
                "What goals do you want to focus on?",
                "What steps are you taking toward your goals?"
            ],
            '(.*) (success|failure)(.*)': [
                "What does success look like to you?",
                "How do you define failure?",
                "What is your idea of success?",
                "What can you learn from failure?",
                "What would success feel like for you?"
            ],
            '(.*) (trust|betrayal)(.*)': [
                "What does trust mean to you?",
                "Have you been betrayed in the past?",
                "What makes you trust someone?",
                "How do you rebuild trust after betrayal?",
                "What does betrayal feel like for you?"
            ],
            '(.*) (change|growth)(.*)': [
                "What changes are you experiencing right now?",
                "What does growth mean to you?",
                "How do you handle change in your life?",
                "What would growth look like for you?",
                "Do you feel ready for change?"
            ],
            '(.*) (hope|despair)(.*)': [
                "What gives you hope?",
                "What causes you to feel despair?",
                "How do you keep hope alive?",
                "When you feel despair, what helps you feel better?",
                "What would make you feel more hopeful?"
            ],
            '(.*) (fear of (.*))': [
                "What are you afraid of when it comes to $2?",
                "Why do you fear $2?",
                "How does this fear affect you?",
                "What would help you overcome your fear of $2?"
            ],
            '(.*)': [
                "Can you tell me more?",
                "Why do you say that?",
                "How does that make you feel?",
                "What do you mean by that?",
                "Interesting... go on.",
                "Could you explain that a bit further?",
                "What are you hoping for in this conversation?"
            ]
        };
        
        this.reflections = {
            "I": "you",
            "me": "you",
            "my": "your",
            "am": "are",
            "you": "I",
            "your": "my",
            "yours": "mine",
            "are": "am",
            "was": "were",
            "will": "shall",
            "have": "had",
            "is": "are"
        };
        
    }

    respond(userInput)
    {
        userInput = userInput.toLowerCase();
        
        // Get all possible responses
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
        let responseInputs = Object.keys(this.responses);
        
        for(let i = 0; i < responseInputs.length; i++)
        {
            // Create RegExp string from current responseInputs.
            // Use 'i' for case-insensitive matching
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
            let regexString = new RegExp(responseInputs[i], 'i');

            // Find if there was a match
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match
            let match = userInput.match(regexString);

            if(match != null)
            {
                let possibleResponses = this.responses[responseInputs[i]];

                // Chose a random response from the possible responses
                let response = possibleResponses[Math.round(Math.random() * (possibleResponses.length - 1))];

                // Replace placeholders in the response with matched groups (if there is any)
                for (let j = 1; j < match.length; j++) 
                {
                    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
                    response = response.replace(`$${j}`, this.reflect(match[j]));
                }

                return response;
            }
        }

        return "Can you tell me more?";
    }

    // Reflect user inputs
    reflect(sentence)
    {
        // Split sentence into individual words
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split
        let words = sentence.split();

        // Deep copy of words
        // https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/structuredClone
        let finalWords = structuredClone(words);

        let newSentences = [];
        let finalSentence = "";

        // Create a new sentence for each of the possible reflections
        Object.keys(this.reflections).forEach(key => 
        {
            newSentences.push(sentence.replace( key, this.reflections[key]));
        });

        // For each new sentence, compare each word to the words in the original sentence.
        // If a word is different, add it to the final senetnce words array
        newSentences.forEach(newSentence => 
        {
            let newWords = newSentence.split();

            for(let i = 0; i < words.length; i++)
            {
                if(words[i] != newWords[i])
                {
                    finalWords[i] = newWords[i];
                }
            }
        });

        // Convert the final words into a single sentence
        for(let i = 0; i < finalWords.length; i++)
        {
            finalSentence += finalWords[i];

            if(i < finalWords.length - 1)
            {
                finalSentence += " ";
            }
        }

        return finalSentence;
    }
}

let eliza = new Eliza();

// Function to handle user input and Eliza's response
function sendMessage()
{
    const userInput = document.getElementById("user-input").value;

    // Return if the user message is empty
    if (userInput.trim() === "")
    { 
        return;
    }

    // Display user message
    displayMessage(userInput, "user");

    // Get Eliza's response
    const elizaResponse = eliza.respond(userInput);
    displayMessage(elizaResponse, "eliza");

    // Clear the input field
    document.getElementById("user-input").value = "";
}

// Function to display messages in the chat window
function displayMessage(message, sender) 
{
    const messagesDiv = document.getElementById("messages");
    const messageElement = document.createElement("div");

    // Set the class based on the sender
    messageElement.classList.add(sender === "user" ? "user-message" : "eliza-message");

    messageElement.textContent = message;
    messagesDiv.appendChild(messageElement);

    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Detect Enter key press in the user input field and call sendMessage
document.getElementById('user-input').addEventListener('keydown', function(event) 
{
    // Check if the pressed key was the Enter key
    if (event.key === 'Enter') 
    {
      sendMessage();
    }
});